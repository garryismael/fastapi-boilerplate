[tool.poetry]
name = "fastapi-boilerplate"
version = "0.1.0"
description = ""
authors = ["Garry <tahinjanaharygarry@gmail.com>"]
readme = "README.md"

packages = [{include = "app", from="src"}]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.111.1"
pyjwt = "^2.8.0"
pydantic-settings = "^2.3.4"
fastcrud = "^0.13.1"
bcrypt = "^4.1.3"
asyncpg = "^0.29.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.0"
ruff = "^0.5.3"
pytest-asyncio = "^0.23.8"
pytest-cov = "^5.0.0"
httpx = "^0.27.0"
poethepoet = "^0.27.0"
mypy = "^1.11.0"

[tool.poe.tasks]
dev = { shell = "PYTHONPATH=src uvicorn app.main:app --reload" }
start = { shell = "PYTHONPATH=src uvicorn app.main:app" }
lint = "poetry run ruff check"
format = "poetry run ruff format"
test = "python -m pytest tests"

[tool.pytest.ini_options]
pythonpath = ["src"]
log_cli = true
asyncio_mode = "auto"
addopts = [
    "--import-mode=importlib",
    "-sv",
    "--doctest-modules",
    "--cov=src",
    "--cov-config=.coveragerc",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # unused import
    "F403", # star imports
]